"""Main service exploiter orchestration"""

from .scanner.port_scanner import PortScanner
from .exploits import (
    ssh_exploit,
    ftp_exploit,
    telnet_exploit,
    smtp_exploit,
    smb_exploit,
    mysql_exploit,
    postgresql_exploit,
    rdp_exploit
)
from .reporting.report_generator import ReportGenerator

class ServiceExploiter:
    """Main service exploitation framework"""
    
    def __init__(self, target, port=None):
        self.target = target
        self.port = port
        self.results = []
    
    def run_full_exploitation(self):
        """
        Scan and exploit all services
        """
        print(f"[*] Service Exploitation Framework")
        print(f"[*] Target: {self.target}")
        print("=" * 60 + "\n")
        
        # Port scan if no specific port provided
        if self.port:
            open_ports = [self.port]
        else:
            scanner = PortScanner(self.target)
            open_ports = scanner.scan()
        
        if not open_ports:
            print("\n[-] No open ports found")
            return
        
        print(f"\n[*] Found {len(open_ports)} open ports")
        print("[*] Beginning exploitation attempts...\n")
        
        # Map ports to exploitation functions
        exploits = {
            21: lambda p: ftp_exploit.exploit_ftp_anonymous(self.target, p),
            22: lambda p: ssh_exploit.exploit_ssh_weak_creds(self.target, p),
            23: lambda p: telnet_exploit.exploit_telnet_no_auth(self.target, p),
            25: lambda p: smtp_exploit.exploit_smtp_open_relay(self.target, p),
            445: lambda p: smb_exploit.exploit_smb_null_session(self.target, p),
            3306: lambda p: mysql_exploit.exploit_mysql_weak_creds(self.target, p),
            3389: lambda p: rdp_exploit.exploit_rdp_weak_creds(self.target, p),
            5432: lambda p: postgresql_exploit.exploit_postgresql_weak_creds(self.target, p)
        }
        
        # Try exploits for each open port
        for port in open_ports:
            if port in exploits:
                try:
                    result = exploits[port](port)
                    if result:
                        self.results.append(result)
                except Exception as e:
                    print(f"    [-] Error exploiting port {port}: {e}")
        
        # Generate report
        report_gen = ReportGenerator(self.target)
        report_gen.generate_report(self.results)