"""Main vulnerability scanner class"""

from .utils.request_handler import RequestHandler
from .utils.spider import Spider
from .checks import sql_injection, xss, lfi, rce, weak_auth, security_headers
from .reporting import report_generator, exploitation_guide
from .config import MAX_URLS_TO_TEST

class VulnerabilityScanner:
    """Main vulnerability scanner"""
    
    def __init__(self, target_url):
        self.target_url = target_url if target_url.startswith('http') else f'https://{target_url}'
        self.vulnerabilities = []
        self.request_handler = RequestHandler()
    
    def run_full_scan(self):
        """Run complete vulnerability scan"""
        print(f"[*] Starting vulnerability scan on {self.target_url}")
        print("=" * 60 + "\n")
        
        # Spider to find URLs
        spider = Spider(self.request_handler, self.target_url)
        test_urls = spider.spider_website()
        
        if not test_urls:
            test_urls = [self.target_url]
        
        # Run vulnerability checks
        print("\n[*] Testing for vulnerabilities...")
        print("-" * 60)
        
        # Test each URL
        for url in test_urls[:MAX_URLS_TO_TEST]:
            self._check_url(url)
        
        # Test authentication
        vuln = weak_auth.check_weak_authentication(self.request_handler, self.target_url)
        if vuln:
            self.vulnerabilities.append(vuln)
        
        # Check security headers
        vuln = security_headers.check_security_headers(self.request_handler, self.target_url)
        if vuln:
            self.vulnerabilities.append(vuln)
        
        # Generate reports
        report_generator.generate_report(self.vulnerabilities, self.target_url)
        exploitation_guide.generate_exploitation_guide(self.vulnerabilities)
    
    def _check_url(self, url):
        """Run all checks on a single URL"""
        checks = [
            sql_injection.check_sql_injection,
            xss.check_xss,
            lfi.check_lfi,
            rce.check_rce
        ]
        
        for check in checks:
            vuln = check(self.request_handler, url)
            if vuln:
                self.vulnerabilities.append(vuln)