"""Generate vulnerability reports"""

import json
from urllib.parse import urlparse

def generate_report(vulnerabilities, target_url):
    """Generate vulnerability report"""
    print("\n" + "=" * 60)
    print("VULNERABILITY SCAN REPORT")
    print("=" * 60 + "\n")
    
    if not vulnerabilities:
        print("[*] No vulnerabilities found")
        return
    
    # Group by severity
    critical = [v for v in vulnerabilities if v['severity'] == 'CRITICAL']
    high = [v for v in vulnerabilities if v['severity'] == 'HIGH']
    medium = [v for v in vulnerabilities if v['severity'] == 'MEDIUM']
    low = [v for v in vulnerabilities if v['severity'] == 'LOW']
    
    print(f"Total Vulnerabilities Found: {len(vulnerabilities)}")
    print(f"  CRITICAL: {len(critical)}")
    print(f"  HIGH: {len(high)}")
    print(f"  MEDIUM: {len(medium)}")
    print(f"  LOW: {len(low)}")
    print("\n" + "-" * 60 + "\n")
    
    # Print detailed findings
    for vuln in vulnerabilities:
        print(f"[{vuln['severity']}] {vuln['type']}")
        print(f"  URL: {vuln['url']}")
        
        if 'parameter' in vuln:
            print(f"  Parameter: {vuln['parameter']}")
        if 'payload' in vuln:
            print(f"  Payload: {vuln['payload']}")
        if 'username' in vuln and 'password' in vuln:
            print(f"  Credentials: {vuln['username']}:{vuln['password']}")
        if 'missing_headers' in vuln:
            for header in vuln['missing_headers']:
                print(f"    - {header['header']}: {header['description']}")
        
        print()
    
    # Save to JSON
    output_file = f"{urlparse(target_url).netloc}_vulnerabilities.json"
    with open(output_file, 'w') as f:
        json.dump(vulnerabilities, f, indent=2)
    
    print(f"[+] Full report saved to: {output_file}")