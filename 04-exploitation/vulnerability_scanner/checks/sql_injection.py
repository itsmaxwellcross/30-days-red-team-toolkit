"""SQL Injection vulnerability check"""

import re
from ..config import SQL_PAYLOADS, SQL_ERROR_PATTERNS
from ..utils.url_parser import parse_url_params

def check_sql_injection(request_handler, url):
    """Test for SQL injection vulnerabilities"""
    print(f"[*] Testing SQL injection: {url}")
    
    base_url, params = parse_url_params(url)
    if not params:
        return None
    
    for param, value in params.items():
        for payload in SQL_PAYLOADS:
            test_params = params.copy()
            test_params[param] = payload
            
            response = request_handler.get(base_url, params=test_params)
            if not response:
                continue
            
            # Check for SQL error messages
            for error_pattern in SQL_ERROR_PATTERNS:
                if re.search(error_pattern, response.text, re.IGNORECASE):
                    print(f"    [+] FOUND: SQL Injection in parameter '{param}'")
                    return {
                        'type': 'SQL Injection',
                        'severity': 'CRITICAL',
                        'url': base_url,
                        'parameter': param,
                        'payload': payload,
                        'evidence': error_pattern
                    }
    
    return None