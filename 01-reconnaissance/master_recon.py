#!/usr/bin/env python3
import sys
import subprocess
import json
from datetime import datetime

class MasterRecon:
    def __init__(self, domain, company_name):
        self.domain = domain
        self.company_name = company_name
        self.results = {
            'target': domain,
            'company': company_name,
            'date': datetime.now().isoformat(),
            'findings': {}
        }
    
    def run_all_tools(self):
        """
        Execute all reconnaissance tools in sequence
        """
        print("[*] MASTER RECONNAISSANCE FRAMEWORK")
        print("=" * 60)
        print(f"[*] Target: {self.domain}")
        print(f"[*] Company: {self.company_name}")
        print(f"[*] Started: {datetime.now()}")
        print("=" * 60 + "\n")
        
        # Phase 1: Subdomain enumeration
        print("[PHASE 1] Subdomain Enumeration")
        print("-" * 60)
        subprocess.run(['python3', 'subdomain_enum.py', self.domain, 'subdomains.txt'])
        print()
        
        # Phase 2: Google Dorking
        print("\n[PHASE 2] Google Dorking")
        print("-" * 60)
        subprocess.run(['python3', 'google_dorker.py', self.domain])
        print()
        
        # Phase 3: Email Enumeration
        print("\n[PHASE 3] Email Enumeration")
        print("-" * 60)
        subprocess.run(['python3', 'email_hunter.py', self.domain, self.company_name])
        print()
        
        # Phase 4: Technology Fingerprinting
        print("\n[PHASE 4] Technology Fingerprinting")
        print("-" * 60)
        subprocess.run(['python3', 'tech_fingerprinter/main.py', f'https://{self.domain}'])
        print()
        
        print("=" * 60)
        print("[+] RECONNAISSANCE COMPLETE")
        print("=" * 60)
        print(f"\n[*] Check output files for detailed results:")
        print(f"    - {self.domain}_dork_results.txt")
        print(f"    - {self.domain}_emails.txt")
        print(f"    - https_{self.domain}_fingerprint.json")
        
        self.generate_report()
    
    def generate_report(self):
        """
        Generate final reconnaissance report
        """
        report = f"""
# RECONNAISSANCE REPORT
**Target:** {self.domain}
**Company:** {self.company_name}
**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

---

## Executive Summary
[Review all output files and summarize key findings here]

## Attack Surface
- Subdomains discovered: [Review subdomain_enum output]
- Web services identified: [Review fingerprint output]
- Exposed files/directories: [Review dork results]
- Employee emails collected: [Review email output]

## Technology Stack
[Review fingerprint JSON for full stack details]

## Potential Vulnerabilities
[Based on discovered technologies and exposed services]

## Recommended Attack Vectors
1. [Vector based on findings]
2. [Vector based on findings]
3. [Vector based on findings]

## Next Steps
- [ ] Test discovered credentials
- [ ] Analyze exposed source code
- [ ] Probe identified services
- [ ] Begin weaponization phase

---
*Report generated by Master Reconnaissance Framework*
"""
        
        filename = f"{self.domain}_recon_report_{datetime.now().strftime('%Y%m%d')}.md"
        with open(filename, 'w') as f:
            f.write(report)
        
        print(f"\n[+] Reconnaissance report template saved: {filename}")
        print("[!] Review and fill in the template with your analysis")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 master_recon.py <domain> <company_name>")
        print("Example: python3 master_recon.py example.com 'Example Corp'")
        sys.exit(1)
    
    domain = sys.argv[1]
    company = sys.argv[2]
    
    recon = MasterRecon(domain, company)
    recon.run_all_tools()